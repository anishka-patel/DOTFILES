#+TITLE: Org file for dotfiles
#+AUTHOR: Anishka Patel
#+DESCRIPTION: A detailed explanation for creation and usage of my dotfiles.
#+EMAIL: anishka.vpatel@gmail.com
#+DATE: [2022-08-25 Thu]
#+OPTIONS: toc:2
#+auto_tangle: t

* Project Structure
Directory structure for whole repository.
#+begin_src bash :shebang /usr/bin/bash :results code :exports both
tree . -L 1 -a -d
#+end_src

#+RESULTS:
#+begin_src bash
.
├── .config
├── .doom.d
├── exports
├── .git
├── install-script
├── .local
├── manuals
└── packages-list

8 directories
#+end_src
Files in the current directory
#+begin_src bash :shebang /usr/bin/bash :results code :exports both
tree . -L 1 -a -F |  grep -v /$
#+end_src

#+RESULTS:
#+begin_src bash
├── .bashrc
├── dotconfig.sh
├── .exrc
├── .gitignore
├── README.md
├── README.org
├── script.sh*
├── .vimrc
└── .zshrc

8 directories, 9 files
#+end_src

** Setup dotconfig.sh
#+begin_src bash :tangle dotconfig.sh
#!/usr/bin/bash
# Title: Dotconfig Script
# Description: A script file to link relevant files to relevent directories and backup where it is required
# Created: [2022-09-16 Fri]
# Usage: ./dotconfig.sh
#+end_src
** Dotconfig file
File to quick setup links to appropriate directories
Link to file: [[file:dotconfig.sh][dotconfig.sh]]
* Bash Config
Click below to take a look:
[[file:.bashrc][.bashrc file]]

Generated by hard linking. The code is below:
#+BEGIN_SRC bash
ln ~/.bashrc
#+END_SRC
**  Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.bashrc ]]; then
    echo -n "Backing up old .bashrc file..."
    mv ~/.bashrc ~/.bashrc.bak
    echo "Completed"
fi
echo -n "Setting up bash files..."
ln -s .bashrc ~/.bashrc
echo "Completed"
#+end_src
* Zsh Config
Click below to take a look:
[[file:.zshrc][.zshrc file]]

Generated by hard linking. The code is below:
#+BEGIN_SRC bash
ln ~/.zshrc
#+END_SRC
** Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.zshrc ]]; then
    echo -n "Backing up old .zshrc file..."
    mv ~/.zshrc ~/.zshrc.bak
    echo "Completed"
fi
echo -n "Setting up zsh files..."
ln -s .zshrc ~/.zshrc
echo "Completed"
#+end_src
* Vi Config
Click below to take a look:
[[file:.exrc][.exrc file]]

Generated by the code below:
#+begin_src bash
ln ~/.exrc
#+end_src
** Requirements
Vi
#+begin_src bash
sudo pacman -S vi --noconfirm
#+end_src
** Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.exrc ]]; then
    echo -n "Backing up old vim files..."
    mv ~/.exrc ~/.exrc.bak
    echo "Completed"
fi
echo -n "Setting up vi files..."
ln -s .vimrc ~/.vimrc
echo "Completed"
#+end_src
* Vim Config
Click below to take a look:
[[file:.vimrc][.vimrc file]]

Generate by the code below:
#+BEGIN_SRC bash
ln ~/.vimrc
#+END_SRC
** Requirements
- Vim
#+begin_src bash
sudo pacman -S vim --noconfirm
#+end_src
** Notes
- Run ~:PlugInstall~ inside vim to install plugins
** Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.vimrc ]]; then
    echo -n "Backing up old vim files..."
    mv ~/.vimrc ~/.vimrc.bak
    echo "Completed"
fi
echo -n "Setting up vim files..."
ln -s .vimrc ~/.vimrc
echo "Completed"
#+end_src
* AstroNvim config
AstroNvim - Highly pre-configured distribution for neovim with IDE like features.
** Requirements
- Neovim 0.7+
#+begin_src bash
sudo pacman -S neovim --noconfirm
#+end_src
- Nerd Fonts
#+begin_src bash
sudo yay -S nerd-fonts-complete
#+end_src
- Terminal w/ true color
#+begin_src bash
sudo pacman -S kitty --noconfirm
#+end_src
- Optional:
#+begin_src bash
sudo pacman -S ripgrep lazygit ncdu htop python nodejs --noconfirm
#+end_src
** Install - [[https://github.com/AstroNvim/AstroNvim][GitHub - AstroNvim]]
#+BEGIN_SRC bash
git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim
nvim +PackerSync
#+END_SRC
** Docs Link - [[https://astronvim.github.io/][Getting Started | AstroNvim]]
** Notes
- AstroNvim(nvim) does remove previous nvim configurations.
- nvim binary located at ~"/usr/bin/nvim"~
- Specification for ~vscodium~ plugin ~vscode-neovim~ are added to ~"~/.config/nvim/init.lua"~
- Plugins and configurations are added to ~plugin~ section in ~"~/.config/nvim/lua/user/init.lua"~
- Imp commands
  - ~:LspInstall~
  - ~:TSInstall~
  - ~:PackerSync~
  - ~:AstroUpdate~
  - ~:checkhealth~ for optional dependencies
** Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.config/nvim/init.lua ]]; then
    echo -n "Backing up old nvim/init.lua"
    mv ~/.config/nvim/init.lua ~/.config/nvim/init.lua.bak
    echo "Completed"
fi
echo -n "Setting up nvim/init.lua"
ln -s .config/nvim/init.lua ~/.config/nvim/init.lua
echo "Completed"
if [[ -f ~/.config/nvim/lua/user/init.lua ]]; then
    echo -n "Backing up old nvim/lua/user/init.lua"
    mv ~/.config/nvim/lua/user/init.lua ~/.config/nvim/lua/user/init.lua.bak
    echo "Completed"
fi
echo -n "Setting up nvim/lua/user/init.lua"
ln -s .config/nvim/lua/user/init.lua ~/.config/nvim/lua/user/init.lua
echo "Completed"
#+end_src
* LunarVim config
LunarVim - Another pre-configure great out-of-the-box neovim setup
** Requirements
- NerdFonts
** Doc Link: [[https://www.lunarvim.org/][LunarVim | Documentation]]
** Install
#+begin_src bash
bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
#+end_src
** Setup files
#+begin_src bash :tangle dotconfig.sh
if [[ -f ~/.config/lvim/init.lua ]]; then
    echo -n "Backing up old lvim/config.lua"
    mv ~/.config/lvim/config.lua ~/.config/lvim/config.lua.bak
    echo "Completed"
fi
echo -n "Setting up lvim/config.lua"
ln -s .config/lvim/config.lua ~/.config/lvim/config.lua
echo "Completed"
#+end_src
* DoomEmacs config
** Requirements
#+begin_src bash
pacman -S git emacs ripgrep find fd --noconfirm
#+end_src
** Install
#+begin_src bash
git clone https://github.com/doomemacs/doomemacs ~/.emacs.d
git switch develop
~/.emacs.d/bin/doom install
#+end_src
** Notes
*** Some optional dependencies can be found through ~doom doctor~ command
#+begin_src bash
~/.emacs.d/bin/doom doctor
#+end_src
 * Refer to [[https://docs.doomemacs.org/latest/][Doom Docs]] for more info
*** Personal config at ~.doom.d/~
Run ~doom sync~ for install config modules
#+begin_src bash
~/.emacs.d/bin/doom sync
#+end_src
** Setup config
#+begin_src bash :tangle dotconfig.sh
if [[ -d ~/.doom.d/ ]]; then
    echo -n "Backing up old doom emacs files..."
    mv ~/.doom.d ~/.doom.d.bak
    echo "Completed"
fi
echo -n "Setting up doom files"
ln -s .doom.d ~/.doom.d
echo "Completed"
#+end_src
* VSCodium config
** Requirements
** Install
#+begin_src bash
yay -S vscodium-bin
#+end_src
** Notes
*** Packages list in ~packages-list/vscodium-package-list.txt~
#+begin_src bash
# generate list with command below
vscodium --list-extensions > vscoidum-packages-list.txt
#+end_src
*** Install packages
#+begin_src bash
cat vscodium-packages-list.txt | xargs -L1 vscodium --install-extensions
#+end_src
** Setup config
#+begin_src bash :tangle dotconfig.sh
echo "Installing vscodium extensions..."
cat packages-list/vscodium-packages-list.txt | xargs -L1 codium --install-extension
echo "Installing vscodium extensions... Completed"
if [[ -d ~/.config/VSCodium/user ]]; then
    echo -n "Backing old codium files"
    mv ~/.config/VSCodium/user/keybindings.json ~/.config/VSCodium/user/keybindings.json.bak
    mv ~/.config/VSCodium/user/settings.json ~/.config/VSCodium/user/settings.json.bak
    echo "Completed"
fi
echo "Moving codium files..."
ln -s .config/VSCodium/user/keybindings.json ~/.config/VSCodium/user/keybindings.json
ln -s .config/VSCodium/user/settings.json ~/.config/VSCodium/user/settings.json
echo "Completed"
#+end_src
* Gesture config
Configuration for ~Gestures~ Application.
~Gestures~ application binds various keyboard shortcuts to touchpad gestures.
** Install ~Gestures~ application
#+BEGIN_SRC bash
sudo pacman -S community/gestures
#+END_SRC
** Configuration
Files stored as ~"~/.config/libinput-gestures.conf"~
Link to file: [[file:.config/libinput-gestures.conf][Gestures config file.]]
** Setup gestures
#+begin_src bash
ln -s .config/libinput-gestures.conf  ~/.config/libinput-gestures.conf
#+end_src
* Packages List ~packages-list/~
** Directory structure
#+begin_src bash :shebang /usr/bin/bash :results code :exports both
tree ./packages-list
#+end_src

#+RESULTS:
#+begin_src bash
./packages-list
├── brew-packages-list.txt
├── cargo-packages-list.txt
├── flatpak-packages-list.txt
├── go-packages-list.txt
├── npm-packages-list.txt
├── pacman-packages-list.txt
├── pip-packages-list.txt
├── script.sh
├── vscodium-packages-list.txt
└── yay-packages-list.txt

0 directories, 10 files
#+end_src
** script.sh
Script to generate packages list for all package managers
[[file:packages-list/script.sh][Pacakge list generator script]]
** Pacman packages
Pacman: Package installer for Arch Linux
*** List generated
1. Explicitly installed packages
   Created with command:
#+BEGIN_SRC bash
pacman -Qqe > pacman-packages-list.txt
#+END_SRC
2. All packages
   Created with command:
#+BEGIN_SRC bash
pacman -Qq > pacman-packages-list-full.txt
#+END_SRC
3. Pacman option to remember for list generation:
   |--------+-----------------------------------------|
   | Option | Action                                  |
   |--------+-----------------------------------------|
   | -Q     | List all packages with version          |
   | -q     | List all packages without version       |
   | -e     | List all explicitly installed packages  |
   | -n     | List packages omitting foreign packages |
   | -m     | List all foreign packages               |
   |--------+-----------------------------------------|
4. Examples
#+BEGIN_SRC bash
pacman -Qqen
#+END_SRC
5. Link for reference: [[https://wiki.archlinux.org/title/pacman/Tips_and_tricks#List_of_installed_packages][Pacman/Tips and tricks - ArchWiki]]
** Yay packages
#+begin_src bash
yay -Qm > yay-packages-list.txt
#+end_src
** Brew packages
#+begin_src bash
brew list > brew-packages-list.txt
#+end_src
** Flatpak packages
#+begin_src bash
flatpak list > flatpak-packages-list.txt
#+end_src
** Pip global packages
Pip: Package install for python
#+BEGIN_SRC bash
pip freeze | awk '{print $1}' > pip-packages-list.txt
#+END_SRC
** Npm global packages
Npm: Node package manager
 #+BEGIN_SRC bash
 npm -g list | awk '{print $2}' | awk -F '@' '{print $1}' > npm-packages-list.txt
 #+END_SRC
** Go global packages
#+begin_src bash
go list ... > go-packages-list.txt
#+end_src
** Rust global packages
#+begin_src bash
cargo install --list > rust-packages-list.txt
#+end_src
* Manuals
#+begin_src bash :shebang /usr/bin/bash :results code :exports both
tree ./manuals
#+end_src

#+RESULTS:
#+begin_src bash
./manuals
├── emacs-manual.org
├── linux-admin.md
├── linux-admin.org
└── vue-nuxt-guide.org

0 directories, 4 files
#+end_src

* Install-Script
** Directory structure
#+begin_src bash :shebang /usr/bin/bash :results code :exports both
tree ./install-script
#+end_src

#+RESULTS:
#+begin_src bash
./install-script
├── install-script.md
├── install-script.org
├── install-script.pdf
└── install-script.sh

0 directories, 4 files
#+end_src
* Script.sh
Script to run on KDE ~cmd~ widget: [[file:script.sh][Script]]
Link to file: [[file:script.sh][script.sh]]
* Exports
** KDE-Shortcut-Files
[[file:exports/ani-kde-scheme.kksrc][Global configuration file for KDE]]
** KDE-Konsave-Files
- Requirements
#+begin_src bash :tangle dotconfig.sh
pip install konsave
#+end_src
- File: [[file:exports/ani-kde-config.knsv][Konsave configuration file]]
  Generated by command
#+begin_src bash
konsave -s ani-kde-config
konsave -e ani-kde-config
#+end_src
- Setup
#+begin_src bash
echo "Install KDE Config"
if [[ -e ~/ani-kde-config.knsv ]]; then
    echo -n "Backing up old kde config files..."
    mv ~/ani-kde-config.knsv ~/ani-kde-config.knsv.bak
    echo "Completed"
fi
echo -n "Moving kde config files..."
ln -s ./exports/ani-kde-config.knsv ~/ani-kde-config.knsv
echo "Completed"
echo -n "Applying kde config files..."
konsave -i ~/ani-kde-config.knsv
echo "Completed"
#+end_src
- Documentation: [[https://github.com/Prayag2/konsave][Konsave | Github]]
** KDE-Tiling
- ~Krohnkite~: Kwin script to emulate tiling window manager.
- Documentation: [[https://github.com/esjeon/krohnkite][Krohnkite | Github]]
